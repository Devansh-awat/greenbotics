import pstats
import os

def analyze_profile(file_path):
    """
    Loads a .pstats file and prints the top 10 functions sorted by
    cumulative and total time.
    """
    if not os.path.exists(file_path):
        print(f"Warning: Profile file not found at '{file_path}'. Skipping.")
        return

    # Create a Stats object
    stats = pstats.Stats(file_path)

    # Remove extraneous path information from filenames for cleaner output
    stats.strip_dirs()

    print(f"\n--- Analysis for: {os.path.basename(file_path)} ---")

    # --- Sort by Cumulative Time ---
    print("\n[ Top 10 by Cumulative Time (tottime of function + sub-calls) ]")
    stats.sort_stats('cumulative').print_stats(10)

    # --- Sort by Total (Internal) Time ---
    print("\n[ Top 10 by Total Time (tottime, time spent in function itself) ]")
    stats.sort_stats('tottime').print_stats(10)

    print("-" * 50)


if __name__ == "__main__":
    # List of the profile files generated by your multiprocessing script
    profile_files = [
        #"capture_process.pstats",
        #"filter_process.pstats",
        #detect_process.pstats",
        #"draw_process.pstats"#,
        "loop_performance.pstats"
    ]

    print("=" * 20)
    print("Starting Performance Analysis")
    print("=" * 20)
    
    for file in profile_files:
        analyze_profile(file)

    print("\nAnalysis complete.")